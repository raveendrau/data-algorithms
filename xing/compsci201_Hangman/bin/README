Name: Xing Su
Date Started: 1/21/13
Date Completed:1/24/13
Estimated Hours: 10
Individuals Consulted: Tianen Li for a method to print ArrayList/HashSet without brackets and comma
Sources Consulted: Java API <http://www.cs.duke.edu/csed/java/jdk1.6/api/index.html>

Notes:  HangmanExecuter.java ---
			Unchanged.
			
		HangmanFileLoader.java ---
			I added a method getRandomWord() in  with no input parameters to return 
			a random word from the given list. This made the game mechanics in Categories possible.
		
		HangmanGame.java ---
			I started with a HashMap to store the different category choices possible: A. Movies, 
			B. Countries, C. Random (original game). When the user inputs which category he or she 
			would like to play, the corresponding txt file is loaded for data. However, because the
			nature of the game is entirely different when the user picks Movies or Countries, I 
			eliminated the user inputs for letter count and guess count and instead wrote the 
			getRandomWord() method in HangmanFileLoader.java to generate a random word. In this 
			case the letter count is set to the length of the word or phrase (including spaces and 
			punctuation) and a simple algorithm is used to determine the number of guesses/misses.
			
			The user inputs are still incorporated if the user chooses to play the Random mode, 
			which is the original version of the game. 
			
			I then made a string array as the blanks and a HashSet to store the guesses. A for loop 
			was used to print out the initial blanks and the while loop starts each iteration of the 
			game. The number of misses and the guessed letters are printed out at the beginning of 
			each loop and another while loop is used to check the entered letter with the existing 
			guess HashSet in order to re-prompt the user to enter a new letter. Both upper and 
			lower cases are checked here before a new letter is added to the guessed letters set. 
			
			An if statement is used to check whether or not an entered letter exists in the secret 
			word, in both upper and lower cases. If the letter exists, a temp copy of the secret 
			word string is made and used to keep track of the rest of the letters in the secret word
			after each guess, while the corresponding letter is copied to the blank array and printed 
			subsequently. All the guessed letters are replaced with "-". The while loop ensures 
			that each instance of the letter guessed will appear after each guess is made. 
			
			If the guessed letter does not exist in the word, that is accounted for in the else part 
			of the if tree, and the number of misses and guessed letters adjust accordingly. Another
			if statement is used to check if the user had won the game, if all of the "_" in the array
			blanks are replaced, the game is won. And that is the end of the while loop. The loop will 
			continue until all the letters have been guessed or the number of misses have been 
			exhausted. 
			
		HangmanStats.java ---
			Made changes according to part 1a and 1b. See WriteUp.pdf
			
			
			 
			
			
			
			
		

